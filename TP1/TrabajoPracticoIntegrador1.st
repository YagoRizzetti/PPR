Object subclass: #CompañiaMinera	instanceVariableNames: 'nombre minas'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!CompañiaMinera methodsFor: 'accessing'!minas	^ minas! !!CompañiaMinera methodsFor: 'accessing'!minas: arg1	minas := arg1! !!CompañiaMinera methodsFor: 'accessing'!nombre	^ nombre! !!CompañiaMinera methodsFor: 'accessing'!nombre: arg1	nombre := arg1! !!CompañiaMinera methodsFor: 'initialization'!initialize	minas := OrderedCollection new.	nombre := nil! !!CompañiaMinera methodsFor: 'negocio'!addMina: arg1	(arg1 isKindOf: Mina)		ifTrue: [ minas add: arg1 ]		ifFalse: [ ^ false ]! !!CompañiaMinera methodsFor: 'negocio'!asString	| tmp2 |	tmp2 := minas do: [ :arg1 | tmp2 := arg1 asString , String cr ].	^ 'Nombre: ' , self nombre , tmp2! !Object subclass: #Explosion	instanceVariableNames: 'cantidadM3'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!Explosion methodsFor: 'negocio'!asString	^ 'CantidadM3: ' , self cantidadM3 asString! !!Explosion methodsFor: 'negocio'!potencia	^ self subclassResponsibility! !!Explosion methodsFor: 'accessing'!cantidadM3	^ cantidadM3! !!Explosion methodsFor: 'accessing'!cantidadM3: arg1	cantidadM3 := arg1! !!Explosion methodsFor: 'initialization'!initialize	cantidadM3 := nil! !Explosion subclass: #ExplosionFisica	instanceVariableNames: 'profundidad'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!ExplosionFisica methodsFor: 'accessing'!profundidad	^ profundidad! !!ExplosionFisica methodsFor: 'accessing'!profundidad: arg1	profundidad := arg1! !!ExplosionFisica methodsFor: 'initialization'!initialize	super initialize.	profundidad := nil! !!ExplosionFisica methodsFor: 'negocio'!asString	^ super asString , 'Profundidad: ' , self profundidad asString! !!ExplosionFisica methodsFor: 'negocio'!potencia	^ profundidad * profundidad! !Explosion subclass: #ExplosionMecanica	instanceVariableNames: 'fuerza'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!ExplosionMecanica methodsFor: 'negocio'!asString	^ super asString , 'Fuerza: ' , self fuerza asString! !!ExplosionMecanica methodsFor: 'negocio'!potencia	^ (fuerza * 2 , 5) asFloat! !!ExplosionMecanica methodsFor: 'accessing'!fuerza: arg1	fuerza := arg1! !!ExplosionMecanica methodsFor: 'accessing'!fuerza	^ fuerza! !!ExplosionMecanica methodsFor: 'initialization'!initialize	super initialize.	fuerza := nil! !Explosion subclass: #ExplosionQuimica	instanceVariableNames: 'capacidad cantidad'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!ExplosionQuimica methodsFor: 'negocio'!asString	^ super asString , 'Capacidad: ' , self capacidad asString		, 'Cantidad: ' , self cantidad asString! !!ExplosionQuimica methodsFor: 'negocio'!potencia	^ capacidad * cantidad! !!ExplosionQuimica methodsFor: 'initialization'!initialize	super initialize.	cantidad := nil.	capacidad := nil! !!ExplosionQuimica methodsFor: 'accessing'!capacidad	^ capacidad! !!ExplosionQuimica methodsFor: 'accessing'!cantidad: arg1	cantidad := arg1! !!ExplosionQuimica methodsFor: 'accessing'!capacidad: arg1	capacidad := arg1! !!ExplosionQuimica methodsFor: 'accessing'!cantidad	^ cantidad! !Object subclass: #Mina	instanceVariableNames: 'nombre pais explosiones'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!Mina methodsFor: 'initialization'!initialize	explosiones := OrderedCollection new.	nombre := nil.	pais := nil! !!Mina methodsFor: 'negocio'!cantidadExplosionQuimica	| tmp1 |	tmp1 := self explosiones		select: [ :arg1 | arg1 isKindOf: ExplosionQuimica ].	^ tmp1 size! !!Mina methodsFor: 'negocio'!addExplosion: arg1	(arg1 isKindOf: Explosion)		ifTrue: [ explosiones add: arg1 ]		ifFalse: [ ^ false ]! !!Mina methodsFor: 'negocio'!totalPotencia	| tmp2 |	tmp2 := 0.	tmp2 := explosiones do: [ :arg1 | tmp2 := tmp2 + arg1 potencia ].	^ tmp2! !!Mina methodsFor: 'negocio'!maxPotencia	| tmp1 |	tmp1 := explosiones		asSortedCollection: [ :arg1 :arg2 | arg1 potencia < arg2 potencia ].	^ tmp1 firstPosition! !!Mina methodsFor: 'negocio'!asString	| tmp2 |	tmp2 := ''.	explosiones do: [ :arg1 | tmp2 := tmp2 , arg1 asString , String cr ].	^ 'Nombre: ' , self nombre , 'Pais: ' , self pais , 'Explosiones: '		, tmp2! !!Mina methodsFor: 'negocio'!totalM3	| tmp2 |	tmp2 := 0.	tmp2 := explosiones do: [ :arg1 | tmp2 := tmp2 + arg1 cantidadM3 ].	^ tmp2! !!Mina methodsFor: 'accessing'!pais: arg1	pais := arg1! !!Mina methodsFor: 'accessing'!nombre: arg1	nombre := arg1! !!Mina methodsFor: 'accessing'!pais	^ pais! !!Mina methodsFor: 'accessing'!explosiones	^ explosiones! !!Mina methodsFor: 'accessing'!explosiones: arg1	explosiones := arg1! !!Mina methodsFor: 'accessing'!nombre	^ nombre! !