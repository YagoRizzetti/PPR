Object subclass: #CompañiaMinera	instanceVariableNames: 'nombre minas'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!CompañiaMinera methodsFor: 'accessing'!nombre: arg1	nombre := arg1! !!CompañiaMinera methodsFor: 'accessing'!nombre	^ nombre! !!CompañiaMinera methodsFor: 'accessing'!minas: arg1	minas := arg1! !!CompañiaMinera methodsFor: 'accessing'!minas	^ minas! !!CompañiaMinera methodsFor: 'initialization' stamp: 'nico 9/3/2020 23:17'!initialize	minas := OrderedCollection new.	nombre := ''! !!CompañiaMinera methodsFor: 'negocio' stamp: 'nico 9/5/2020 04:27'!maximasPotencia"retorna una colección con los objetos “Explosión” de mayorpotencia de cada mina. Debe obtener el objeto explosión de mayor potencia de cadamina y con estos armar una colección y retornarla."	| tmp1 tmp3 |	tmp1 := OrderedCollection new.	minas		do: [ :arg1 | 			tmp3 := arg1 explosiones				detect: [ :arg2 | arg2 potencia = arg1 maxPotencia ]				ifNone: [ tmp3 := nil ].			tmp1 add: tmp3 ].	^ tmp1! !!CompañiaMinera methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:20'!addExplosion: nombreMina  y: unaExplosion "recibe como colaboradores externos el nombre de una mina y un objeto “Explosión”. Debe buscar esa mina dentro de su colección de minas y si la encuentra debe agregarle la explosión retornando verdadero en ese caso y falso si no la encuentra. Asuma que el nombre de la mina no se repite, puede que no se encuentre, pero si existe en la colección será una sola vez."	| ban unaMina |	ban := false.	(unaExplosion isKindOf: Explosion)		ifTrue: [ unaMina := minas				detect: [ :arg3 | arg3 nombre = nombreMina ]				ifNone: [ unaMina := nil ].			unaMina isNil				ifFalse: [ unaMina explosiones add: unaExplosion.					ban := true ] ].	^ ban! !!CompañiaMinera methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:19'!totalM3" retorna un número que se obtiene como sumatoria de todos los metroscúbicos extraídos en total en cada mina."	| totM3 |	totM3  := 0.	minas do: [ :arg1 | totM3  := totM3  + arg1 totalM3 ].	^ totM3 ! !!CompañiaMinera methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:18'!totalPotencia"Retorna un número que se obtiene como sumatoria de todas laspotencias totales de cada una de las minas."	| totPot |	totPot  := 0.	minas do: [ :arg1 | totPot  := totPot  + arg1 totalPotencia  ].	^ totPot ! !!CompañiaMinera methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:10'!asString	| tmp2 |	tmp2:=''.	minas do: [ :arg1 | tmp2 := tmp2, arg1 asString , String cr ].	^ 'NOMBRE COMPAÑIA MINERA: ' , self nombre , String cr , 'MINAS: ' , String cr , tmp2! !!CompañiaMinera methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:18'!addMina: unaMina" Recibe como colaborador externo una mina y la agrega a la colección."	(unaMina  isKindOf: Mina)		ifTrue: [ minas add: unaMina  ]		ifFalse: [ ^ false ]! !Object subclass: #Explosion	instanceVariableNames: 'cantidadM3'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!Explosion methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:11'!asString	^ '			CantidadM3: ' , self cantidadM3 asString! !!Explosion methodsFor: 'negocio'!potencia	^ self subclassResponsibility! !!Explosion methodsFor: 'accessing'!cantidadM3: arg1	cantidadM3 := arg1! !!Explosion methodsFor: 'accessing'!cantidadM3	^ cantidadM3! !!Explosion methodsFor: 'initialization' stamp: 'nico 9/3/2020 23:17'!initialize	cantidadM3 := 0.0! !Explosion subclass: #ExplosionFisica	instanceVariableNames: 'profundidad'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!ExplosionFisica methodsFor: 'initialization' stamp: 'nico 9/3/2020 23:17'!initialize	super initialize.	profundidad := 0! !!ExplosionFisica methodsFor: 'negocio'!asString	^ super asString , 'Profundidad: ' , self profundidad asString! !!ExplosionFisica methodsFor: 'negocio'!potencia	^ profundidad * profundidad! !!ExplosionFisica methodsFor: 'accessing'!profundidad	^ profundidad! !!ExplosionFisica methodsFor: 'accessing'!profundidad: arg1	profundidad := arg1! !Explosion subclass: #ExplosionMecanica	instanceVariableNames: 'fuerza'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!ExplosionMecanica methodsFor: 'accessing'!fuerza: arg1	fuerza := arg1! !!ExplosionMecanica methodsFor: 'accessing'!fuerza	^ fuerza! !!ExplosionMecanica methodsFor: 'negocio'!asString	^ super asString , 'Fuerza: ' , self fuerza asString! !!ExplosionMecanica methodsFor: 'negocio' stamp: 'nico 9/5/2020 00:52'!potencia	^ (fuerza * 2.5) asFloat! !!ExplosionMecanica methodsFor: 'initialization' stamp: 'nico 9/4/2020 18:16'!initialize	super initialize.	fuerza := 0.0! !Explosion subclass: #ExplosionQuimica	instanceVariableNames: 'capacidad cantidad'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!ExplosionQuimica methodsFor: 'initialization' stamp: 'nico 9/4/2020 18:17'!initialize	super initialize.	cantidad := 0.0.	capacidad := 0.0! !!ExplosionQuimica methodsFor: 'negocio' stamp: 'nico 9/2/2020 16:57'!asString	^ super asString , 'Capacidad: ' , self capacidad asString	, 'Cantidad: ' , self cantidad asString! !!ExplosionQuimica methodsFor: 'negocio'!potencia	^ capacidad * cantidad! !!ExplosionQuimica methodsFor: 'accessing'!cantidad: arg1	cantidad := arg1! !!ExplosionQuimica methodsFor: 'accessing'!cantidad	^ cantidad! !!ExplosionQuimica methodsFor: 'accessing'!capacidad	^ capacidad! !!ExplosionQuimica methodsFor: 'accessing'!capacidad: arg1	capacidad := arg1! !Object subclass: #Mina	instanceVariableNames: 'nombre pais explosiones'	classVariableNames: ''	poolDictionaries: ''	category: 'TrabajoPracticoIntegrador1'!!Mina methodsFor: 'initialization' stamp: 'nico 9/4/2020 18:17'!initialize	explosiones := OrderedCollection new.	nombre := ' '.	pais := ' '! !!Mina methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:17'!cantidadExplosionQuimica" Retorna la cantidad de explosiones químicas de la mina."	| cantExpQca |	cantExpQca := self explosiones		select: [ :arg1 | arg1 isKindOf: ExplosionQuimica ].	^ cantExpQca size! !!Mina methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:16'!maxPotencia" Retorna la explosión de mayor potencia de toda la mina"	| explosionesOrd tmp|	explosionesOrd  := explosiones		asSortedCollection: [ :exp1 :exp2 | exp1 potencia > exp2  potencia ].	tmp:= explosionesOrd first.	^ tmp potencia! !!Mina methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:17'!totalM3"Retorna un número que se obtiene como sumatoria de todos los metroscúbicos removidos por las explosiones de la mina."	| totM3|	totM3  := 0.	explosiones do: [ :arg1 | totM3  := totM3  + arg1 cantidadM3 ].	^ totM3 ! !!Mina methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:15'!addExplosion: unaExplosion" Recibe como colaborador externo una explosión y la agrega a lacolección de explosiones."	(unaExplosion  isKindOf: Explosion)		ifTrue: [ explosiones add: unaExplosion  ]		ifFalse: [ ^ false ]! !!Mina methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:06'!asString	| tmp2 |	tmp2 := ''.	explosiones do: [ :arg1 | tmp2 := tmp2 , arg1 asString , String cr ].	^ 'Nombre: ' , self nombre , String cr , '   Pais: ' , self pais		, String cr , '		EXPLOSIONES: ' , String cr , tmp2! !!Mina methodsFor: 'negocio' stamp: 'nico 9/5/2020 03:16'!totalPotencia"Retorna un número que se obtiene como sumatoria de todas laspotencias de las explosiones de la mina."	| totPot|	totPot  := 0.	explosiones do: [ :arg1 | totPot  := totPot  + arg1 potencia ].	^ totPot ! !!Mina methodsFor: 'accessing'!nombre: arg1	nombre := arg1! !!Mina methodsFor: 'accessing'!explosiones: arg1	explosiones := arg1! !!Mina methodsFor: 'accessing'!explosiones	^ explosiones! !!Mina methodsFor: 'accessing'!pais	^ pais! !!Mina methodsFor: 'accessing'!nombre	^ nombre! !!Mina methodsFor: 'accessing'!pais: arg1	pais := arg1! !